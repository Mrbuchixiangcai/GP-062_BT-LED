C51 COMPILER V9.00   MAIN                                                                  12/06/2018 14:18:26 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN ..\Object\main.obj
COMPILER INVOKED BY: D:\ProgramFiles\Keil_v5\C51\BIN\C51.EXE ..\User\main.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\User;..\H
                    -ardware;..\Hardware\BT;..\Hardware\KEY;..\Hardware\LED;..\Hardware\SystemSleep) DEBUG OBJECTEXTEND PRINT(.\Listings\main
                    -.lst) OBJECT(..\Object\main.obj)

line level    source

   1          //======================================================
   2          // Main program routine
   3          // - Device name  : MC96F6508A
   4          // - Package type : 52LQFP
   5          //======================================================
   6          // For XDATA variable : V1.041.00 ~
   7          #define         MAIN    1
   8          
   9          // Generated    : Wed, Nov 28, 2018 (10:41:47)
  10          #include        "MC96F6508A.h"
  11          #include        "func_def.h"
  12          #include    "app_main.h"
  13          
  14          void main()
  15          {
  16   1              cli();                  // disable INT. during peripheral setting
  17   1              port_init();            // initialize ports
  18   1              clock_init();           // initialize operation clock
  19   1              BUZ_init();             // initialize Buzzer
  20   1              LCD_init();             // initialize LCD
  21   1              Timer0_init();          // initialize Timer0
  22   1              Timer3_init();          // initialize Timer3
  23   1              UART_init();            // initialize UART interface
  24   1              WT_init();              // initialize Watch timer
  25   1              sei();                  // enable INT.
  26   1              
  27   1              // TODO: add your main code here
  28   1              app_main();
  29   1              while(1);
  30   1      }
  31          
  32          //======================================================
  33          // interrupt routines
  34          //======================================================
  35          
  36          void INT_UART_Rx() interrupt 9
  37          {
  38   1              // UART Rx interrupt
  39   1              // TODO: add your code here
  40   1              uint8_t temp_RxData;
  41   1              temp_RxData=UARTDR;
  42   1              UARTST &= (~0x20);  //置零中断标志，不然会一直进来
  43   1              uart1_RX_Timeout=10;
  44   1              if(Flag_UART_ReceiveBuffer_A_B)
  45   1              {
  46   2                      if(uart1_RX_Pointer<UART1_LEN_BUFFER)
  47   2                              uart1_ReceiveBuffer_A[uart1_RX_Pointer++]=temp_RxData;
  48   2                      if(temp_RxData==0x55)
  49   2                      {
  50   3                              uart1_RX_Pointer=0;
  51   3                              Flag_UART1_RX_Finish_A=1;
  52   3                              Flag_UART_ReceiveBuffer_A_B=~Flag_UART_ReceiveBuffer_A_B;
  53   3                      }
C51 COMPILER V9.00   MAIN                                                                  12/06/2018 14:18:26 PAGE 2   

  54   2              }
  55   1              else
  56   1              {
  57   2                      if(uart1_RX_Pointer<UART1_LEN_BUFFER)
  58   2                              uart1_ReceiveBuffer_B[uart1_RX_Pointer++]=temp_RxData;
  59   2                      if(temp_RxData==0x55)
  60   2                      {
  61   3                              uart1_RX_Pointer=0;
  62   3                              Flag_UART1_RX_Finish_B=1;
  63   3                              Flag_UART_ReceiveBuffer_A_B=~Flag_UART_ReceiveBuffer_A_B;
  64   3                      }
  65   2              }
  66   1      }
  67          
  68          void INT_UART_Tx() interrupt 10
  69          {
  70   1              // UART Tx interrupt
  71   1              // TODO: add your code here
  72   1              //read_UARTData=UARTST;
  73   1              UARTST &= ~0x80;
  74   1              if(uart1_EnableSend)
  75   1              {
  76   2                      uart1_TX_Timeout=10;
  77   2                      UARTDR=uart1_TransmitBuffer[uart1_TX_Pointer++];
  78   2                      if(uart1_TransmitBuffer[(uart1_TX_Pointer-1)]==0x55)
  79   2                              uart1_EnableSend=0;
  80   2              }
  81   1      }
  82          
  83          void INT_Timer0() interrupt 13
  84          {
  85   1              // Timer0 interrupt
  86   1              // TODO: add your code here
  87   1              Sys_Tick();
  88   1      }
  89          
  90          void INT_Timer3() interrupt 16
  91          {
  92   1              // Timer3 interrupt
  93   1              // TODO: add your code here
  94   1              if(++cnt200us>=4)
  95   1              {
  96   2                      cnt200us=0;
  97   2                      LEDDisplayDrive();
  98   2              }
  99   1      }
 100          
 101          void INT_WT() interrupt 20
 102          {
 103   1              // Watch timer interrupt
 104   1              // TODO: add your code here
 105   1              gRTC_HalfSecond=(!gRTC_HalfSecond);
 106   1              if(gRTC_HalfSecond)
 107   1              {
 108   2                      if(++gRTC_Sec>59)
 109   2                      {
 110   3                              gRTC_Sec=0;
 111   3                              if(++gRTC_Minute>59)
 112   3                              {
 113   4                                      gRTC_Minute=0;
 114   4                                      if(++gRTC_Hour>23)
 115   4                                      {
C51 COMPILER V9.00   MAIN                                                                  12/06/2018 14:18:26 PAGE 3   

 116   5                                              gRTC_Hour=0;
 117   5                                              gRTC_Week<<=1;
 118   5                                              if(gRTC_Week==0x80)//如果移位之后等于0x80，说明是第8次移位，这时候就是
 119   5                                                      gRTC_Week=0x01;//周一，所以赋值为0x01。
 120   5                                      }
 121   4                              }
 122   3                      }
 123   2      //              if(++gRTC_Minute>59)//这里把分钟提到和秒一样的等级，是测试用，可以缩短测试时间时的时间
 124   2      //              {
 125   2      //                      gRTC_Minute=0;
 126   2      //                      if(++gRTC_Hour>23)
 127   2      //                      {
 128   2      //                              gRTC_Hour=0;
 129   2      //                              gRTC_Week<<=1;
 130   2      //                              if(gRTC_Week==0x80)//如果移位之后等于0x80，说明是第8次移位，这时候就是
 131   2      //                                      gRTC_Week=0x01;//周一，所以赋值为0x01。
 132   2      //                      }
 133   2      //              }
 134   2              }
 135   1              Flag_Dot=~Flag_Dot;
 136   1              
 137   1      }
 138          
 139          //======================================================
 140          // peripheral setting routines
 141          //======================================================
 142          
 143          unsigned char UART_read()
 144          {
 145   1              unsigned char dat;
 146   1              
 147   1              while(!(UARTST & 0x20));        // wait
 148   1              dat = UARTDR;           // read
 149   1              return  dat;
 150   1      }
 151          
 152          void BUZ_OnOff(unsigned char On)
 153          {
 154   1              // Buzzer ON(On=1) / OFF(On=0)
 155   1              BUZCR = (On)? (BUZCR | 1) : (BUZCR & (~1));     // ON / OFF
 156   1      }
 157          
 158          void BUZ_init()
 159          {
 160   1              // initialize Buzzer
 161   1              // Frequency (Hz) = 1000.000000
 162   1              BUZCR = 0x00;           // clock source
 163   1              BUZDR = 0xF9;           // count value
 164   1      }
 165          
 166          void LCD_init()
 167          {
 168   1              // initialize LCD
 169   1              // Frame freq. = 16.000000Hz
 170   1              LCDCRH = 0x00;          // LCD control High
 171   1              LCDCRL = 0x00;          // LCD control Low
 172   1              LCDCCR = 0x00;          // LCD Contrast control
 173   1      }
 174          
 175          void Timer0_init()
 176          {
 177   1              // initialize Timer0
C51 COMPILER V9.00   MAIN                                                                  12/06/2018 14:18:26 PAGE 4   

 178   1              // 8bit timer, period = 1.000000mS
 179   1              T0CR = 0x92;            // timer setting
 180   1              T0DR = 0x7C;            // period count
 181   1              IE2 |= 0x02;            // Enable Timer0 interrupt
 182   1              T0CR |= 0x01;           // clear counter
 183   1      }
 184          
 185          void Timer3_init()
 186          {
 187   1              // initialize Timer3
 188   1              // 8bit timer, period = 0.050000mS
 189   1              T3DR = 0x18;            // period count
 190   1              T3CR = 0x8A;            // timer setting
 191   1              IE2 |= 0x10;            // Enable Timer3 interrupt
 192   1              T3CR |= 0x01;           // clear counter
 193   1      }
 194          
 195          void UART_init()
 196          {
 197   1              // initialize UART interface
 198   1              // UART : 9615bps N 8 1
 199   1              UARTCR2 = 0x02;         // activate UART
 200   1              UARTCR1 = 0x06;         // bit count, parity
 201   1              UARTCR2 |= 0xEC;        // interrupt, speed
 202   1              UARTCR3 = 0x00;         // stop bit
 203   1              UARTBD = 0x67;          // baud rate
 204   1              IE1 |= 0x18;            // enable UART interrupt
 205   1      }
 206          
 207          void UART_write(unsigned char dat)
 208          {
 209   1              while(!(UARTST & 0x80));        // wait
 210   1              UARTDR = dat;           // write
 211   1      }
 212          
 213          void WT_init()
 214          {
 215   1              // initialize Watch timer
 216   1              WTCR = 0x88;            // setting
 217   1              WTDR = 0x01;            // set duty
 218   1              WTDR = 0x80;            // clear WT
 219   1              IE3 |= 0x04;            // Enable WT interrupt
 220   1      }
 221          
 222          void clock_init()
 223          {
 224   1              // internal RC clock (16.000000MHz)
 225   1              //OSCCR = 0x29;         // Set Int. OSC
 226   1              OSCCR = (IRCS_16MHZ | IRC_EN | (1 << SCLKE));
 227   1              SCCR  = 0x00;           // Use Int. OSC
 228   1      //      // external clock//外部时钟源配置
 229   1      //      OSCCR = 0x0A;           // Enable int. 1MHz and Ext. OSC
 230   1      //      BITCR = 0x09;           // Set waiting time : 16ms@1MHz
 231   1      //      while((BITCR & 0x80) == 0);     // Ext. OSC stabilizing time
 232   1      //      SCCR = 0x01;            // Change to Ext. OSC
 233   1      //      OSCCR |= 0x04;          // Disable Int. OSC
 234   1      }
 235          
 236          void port_init()
 237          {
 238   1              // initialize ports
 239   1              //   1 : P13      in  KEY3
C51 COMPILER V9.00   MAIN                                                                  12/06/2018 14:18:26 PAGE 5   

 240   1              //  11 : SXIN     in  32.768
 241   1              //  12 : SXOUT    out 32.768
 242   1              //  14 : P20      in  AC_DET
 243   1              //  15 : P21      out COM1
 244   1              //  16 : P22      out COM2
 245   1              //  17 : P23      out COM3
 246   1              //  18 : P24      out COM4
 247   1              //  22 : P30      out SEG1
 248   1              //  23 : P31      out SEG2
 249   1              //  24 : P32      out SEG3
 250   1              //  25 : P33      out SEG4
 251   1              //  26 : P34      out SEG5
 252   1              //  27 : P35      out SEG6
 253   1              //  28 : P36      out SEG7
 254   1              //  44 : TXD      out TXD
 255   1              //  45 : RXD      in  RXD
 256   1              //  48 : BUZo     out BUZZ
 257   1              //  50 : P10      in  KEY0
 258   1              //  51 : P11      in  KEY1
 259   1              //  52 : P12      in  KEY2
 260   1              P0IO = 0xFF;            // direction
 261   1              P0PU = 0x00;            // pullup
 262   1              P0OD = 0x00;            // open drain
 263   1              P0DB = 0x00;            // bit7~6(debounce clock), bit1~0=P01~00 debounce
 264   1              P0   = 0x00;            // port initial value
 265   1      
 266   1              P1IO = 0xF0;            // direction
 267   1              P1PU = 0x0F;            // pullup
 268   1              P1OD = 0x00;            // open drain
 269   1              P1DB = 0x00;            // P17~10 debounce
 270   1              P1   = 0x00;            // port initial value
 271   1      
 272   1              P2IO = 0xFE;            // direction
 273   1              P2PU = 0x00;            // pullup
 274   1              P2OD = 0x00;            // open drain
 275   1              P2   = 0x00;            // port initial value
 276   1      
 277   1              P3IO = 0xFF;            // direction
 278   1              P3PU = 0x00;            // pullup
 279   1              P3OD = 0x00;            // open drain
 280   1              P3   = 0x00;            // port initial value
 281   1      
 282   1              P4IO = 0xFF;            // direction
 283   1              P4PU = 0x00;            // pullup
 284   1              P4OD = 0x00;            // open drain
 285   1              P4   = 0x00;            // port initial value
 286   1      
 287   1              P5IO = 0x7F;            // direction
 288   1              P5PU = 0x00;            // pullup
 289   1              P5OD = 0x00;            // open drain
 290   1              P5   = 0x00;            // port initial value
 291   1      
 292   1              P6IO = 0xF7;            // direction
 293   1              P6PU = 0x00;            // pullup
 294   1              P6OD = 0x00;            // open drain
 295   1              P6   = 0x00;            // port initial value
 296   1      
 297   1              // Set port functions
 298   1              P0FSR = 0x02;           // P0 selection//开启BUZE
 299   1              P2FSR = 0x00;           // P2 selection
 300   1              P3FSR = 0x00;           // P3 selection
 301   1              P4FSR = 0x00;           // P4 selection
C51 COMPILER V9.00   MAIN                                                                  12/06/2018 14:18:26 PAGE 6   

 302   1              P5FSRH = 0x18;          // P5 selection High
 303   1              P5FSRL = 0x00;          // P5 selection Low
 304   1              P6FSR = 0x0C;           // P6 selection
 305   1      }
 306          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    576    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
