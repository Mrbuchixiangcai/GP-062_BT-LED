C51 COMPILER V9.00   MAIN                                                                  12/04/2018 17:30:26 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN ..\Object\main.obj
COMPILER INVOKED BY: D:\ProgramFiles\Keil_v5\C51\BIN\C51.EXE ..\User\main.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\User;..\H
                    -ardware;..\Hardware\BT;..\Hardware\KEY;..\Hardware\LED) DEBUG OBJECTEXTEND PRINT(.\Listings\main.lst) OBJECT(..\Object\m
                    -ain.obj)

line level    source

   1          //======================================================
   2          // Main program routine
   3          // - Device name  : MC96F6508A
   4          // - Package type : 52LQFP
   5          //======================================================
   6          // For XDATA variable : V1.041.00 ~
   7          #define         MAIN    1
   8          
   9          // Generated    : Wed, Nov 28, 2018 (10:41:47)
  10          #include        "MC96F6508A.h"
  11          #include        "func_def.h"
  12          #include    "app_main.h"
  13          
  14          void main()
  15          {
  16   1              cli();                  // disable INT. during peripheral setting
  17   1              port_init();            // initialize ports
  18   1              clock_init();           // initialize operation clock
  19   1              LCD_init();             // initialize LCD
  20   1              Timer0_init();          // initialize Timer0
  21   1              Timer3_init();          // initialize Timer3
  22   1              UART_init();            // initialize UART interface
  23   1              WT_init();              // initialize Watch timer
  24   1              sei();                  // enable INT.
  25   1              
  26   1              // TODO: add your main code here
  27   1              app_main();
  28   1              while(1);
  29   1      }
  30          
  31          //======================================================
  32          // interrupt routines
  33          //======================================================
  34          
  35          void INT_UART_Rx() interrupt 9
  36          {
  37   1              // UART Rx interrupt
  38   1              // TODO: add your code here
  39   1              uint8_t temp_RxData;
  40   1              temp_RxData=UARTDR;
  41   1              UARTST &= (~0x20);  //置零中断标志，不然会一直进来
  42   1      }
  43          
  44          void INT_UART_Tx() interrupt 10
  45          {
  46   1              // UART Tx interrupt
  47   1              // TODO: add your code here
  48   1              UARTST &= ~0x80;
  49   1              
  50   1      }
  51          
  52          void INT_Timer0() interrupt 13
  53          {
C51 COMPILER V9.00   MAIN                                                                  12/04/2018 17:30:26 PAGE 2   

  54   1              // Timer0 interrupt
  55   1              // TODO: add your code here
  56   1              Sys_Tick();
  57   1      }
  58          
  59          void INT_Timer3() interrupt 16
  60          {
  61   1              // Timer3 interrupt
  62   1              // TODO: add your code here
  63   1              if(++cnt200us>=4)
  64   1              {
  65   2                      cnt200us=0;
  66   2                      LEDDisplayDrive();
  67   2              }
  68   1      }
  69          
  70          void INT_WT() interrupt 20
  71          {
  72   1              // Watch timer interrupt
  73   1              // TODO: add your code here
  74   1              gRTC_HalfSecond=(!gRTC_HalfSecond);
  75   1              if(gRTC_HalfSecond)
  76   1              {
  77   2                      if(++gRTC_Sec>59)
  78   2                      {
  79   3                              gRTC_Sec=0;
  80   3                              if(++gRTC_Minute>59)
  81   3                              {
  82   4                                      gRTC_Minute=0;
  83   4                                      if(++gRTC_Hour>23)
  84   4                                      {
  85   5                                              gRTC_Hour=0;
  86   5                                              gRTC_Week<<=1;
  87   5                                              if(gRTC_Week==0x80)//如果移位之后等于0x80，说明是第8次移位，这时候就是
  88   5                                                      gRTC_Week=0x01;//周一，所以赋值为0x01。
  89   5                                      }
  90   4                              }
  91   3                      }
  92   2      //              if(++gRTC_Minute>59)//这里把分钟提到和秒一样的等级，是测试用，可以缩短测试时间时的时间
  93   2      //              {
  94   2      //                      gRTC_Minute=0;
  95   2      //                      if(++gRTC_Hour>23)
  96   2      //                      {
  97   2      //                              gRTC_Hour=0;
  98   2      //                              gRTC_Week<<=1;
  99   2      //                              if(gRTC_Week==0x80)//如果移位之后等于0x80，说明是第8次移位，这时候就是
 100   2      //                                      gRTC_Week=0x01;//周一，所以赋值为0x01。
 101   2      //                      }
 102   2      //              }
 103   2              }
 104   1              
 105   1      }
 106          
 107          //======================================================
 108          // peripheral setting routines
 109          //======================================================
 110          
 111          unsigned char UART_read()
 112          {
 113   1              unsigned char dat;
 114   1              
 115   1              while(!(UARTST & 0x20));        // wait
C51 COMPILER V9.00   MAIN                                                                  12/04/2018 17:30:26 PAGE 3   

 116   1              dat = UARTDR;           // read
 117   1              return  dat;
 118   1      }
 119          
 120          void LCD_init()
 121          {
 122   1              // initialize LCD
 123   1              // Frame freq. = 16.000000Hz
 124   1              LCDCRH = 0x00;          // LCD control High
 125   1              LCDCRL = 0x00;          // LCD control Low
 126   1              LCDCCR = 0x00;          // LCD Contrast control
 127   1      }
 128          
 129          void Timer0_init()
 130          {
 131   1              // initialize Timer0
 132   1              // 8bit timer, period = 1.000000mS
 133   1              T0CR = 0x92;            // timer setting
 134   1              T0DR = 0x7C;            // period count
 135   1              IE2 |= 0x02;            // Enable Timer0 interrupt
 136   1              T0CR |= 0x01;           // clear counter
 137   1      }
 138          
 139          void Timer3_init()
 140          {
 141   1              // initialize Timer3
 142   1              // 8bit timer, period = 0.050000mS
 143   1              T3DR = 0x18;            // period count
 144   1              T3CR = 0x8A;            // timer setting
 145   1              IE2 |= 0x10;            // Enable Timer3 interrupt
 146   1              T3CR |= 0x01;           // clear counter
 147   1      }
 148          
 149          void UART_init()
 150          {
 151   1              // initialize UART interface
 152   1              // UART : 9615bps N 8 1
 153   1              UARTCR2 = 0x02;         // activate UART
 154   1              UARTCR1 = 0x06;         // bit count, parity
 155   1              UARTCR2 |= 0xEC;        // interrupt, speed
 156   1              UARTCR3 = 0x00;         // stop bit
 157   1              UARTBD = 0x67;          // baud rate
 158   1              IE1 |= 0x18;            // enable UART interrupt
 159   1      }
 160          
 161          void UART_write(unsigned char dat)
 162          {
 163   1              while(!(UARTST & 0x80));        // wait
 164   1              UARTDR = dat;           // write
 165   1      }
 166          
 167          void WT_init()
 168          {
 169   1              // initialize Watch timer
 170   1              WTCR = 0x88;            // setting
 171   1              WTDR = 0x01;            // set duty
 172   1              WTDR = 0x81;            // clear WT
 173   1              IE3 |= 0x04;            // Enable WT interrupt
 174   1      }
 175          
 176          void clock_init()
 177          {
C51 COMPILER V9.00   MAIN                                                                  12/04/2018 17:30:26 PAGE 4   

 178   1              // internal RC clock (16.000000MHz)
 179   1              OSCCR = 0x28;           // Set Int. OSC
 180   1              SCCR = 0x00;            // Use Int. OSC
 181   1      }
 182          
 183          void port_init()
 184          {
 185   1              // initialize ports
 186   1              //   1 : P13      in  KEY3
 187   1              //  11 : SXIN     in  32.768
 188   1              //  12 : SXOUT    out 32.768
 189   1              //  14 : P20      in  AC_DET
 190   1              //  15 : P21      out COM1
 191   1              //  16 : P22      out COM2
 192   1              //  17 : P23      out COM3
 193   1              //  18 : P24      out COM4
 194   1              //  22 : P30      out SEG1
 195   1              //  23 : P31      out SEG2
 196   1              //  24 : P32      out SEG3
 197   1              //  25 : P33      out SEG4
 198   1              //  26 : P34      out SEG5
 199   1              //  27 : P35      out SEG6
 200   1              //  28 : P36      out SEG7
 201   1              //  44 : TXD      out TXD
 202   1              //  45 : RXD      in  RXD
 203   1              //  48 : BUZo     out BUZZ
 204   1              //  50 : P10      in  KEY0
 205   1              //  51 : P11      in  KEY1
 206   1              //  52 : P12      in  KEY2
 207   1              P0IO = 0xFF;            // direction
 208   1              P0PU = 0x00;            // pullup
 209   1              P0OD = 0x00;            // open drain
 210   1              P0DB = 0x00;            // bit7~6(debounce clock), bit1~0=P01~00 debounce
 211   1              P0   = 0x00;            // port initial value
 212   1      
 213   1              P1IO = 0xF0;            // direction
 214   1              P1PU = 0x0F;            // pullup
 215   1              P1OD = 0x00;            // open drain
 216   1              P1DB = 0x00;            // P17~10 debounce
 217   1              P1   = 0x00;            // port initial value
 218   1      
 219   1              P2IO = 0xFE;            // direction
 220   1              P2PU = 0x00;            // pullup
 221   1              P2OD = 0x00;            // open drain
 222   1              P2   = 0x00;            // port initial value
 223   1      
 224   1              P3IO = 0xFF;            // direction
 225   1              P3PU = 0x00;            // pullup
 226   1              P3OD = 0x00;            // open drain
 227   1              P3   = 0x00;            // port initial value
 228   1      
 229   1              P4IO = 0xFF;            // direction
 230   1              P4PU = 0x00;            // pullup
 231   1              P4OD = 0x00;            // open drain
 232   1              P4   = 0x00;            // port initial value
 233   1      
 234   1              P5IO = 0x7F;            // direction
 235   1              P5PU = 0x00;            // pullup
 236   1              P5OD = 0x00;            // open drain
 237   1              P5   = 0x00;            // port initial value
 238   1      
 239   1              P6IO = 0xF7;            // direction
C51 COMPILER V9.00   MAIN                                                                  12/04/2018 17:30:26 PAGE 5   

 240   1              P6PU = 0x00;            // pullup
 241   1              P6OD = 0x00;            // open drain
 242   1              P6   = 0x00;            // port initial value
 243   1      
 244   1              // Set port functions
 245   1              P0FSR = 0x02;           // P0 selection
 246   1              P2FSR = 0x00;           // P2 selection
 247   1              P3FSR = 0x00;           // P3 selection
 248   1              P4FSR = 0x00;           // P4 selection
 249   1              P5FSRH = 0x18;          // P5 selection High
 250   1              P5FSRL = 0x00;          // P5 selection Low
 251   1              P6FSR = 0x0C;           // P6 selection
 252   1      }
 253          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    418    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       1
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
